[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=16]
code = "shader_type canvas_item;



const int iterations = 13; //normal 17
const int volsteps = 3; //nomral 3
const float sparsity = 0.5; // normal 0.5
const float stepsize = 0.2; // normal 0.2
const float frequencyVariation =  0.3; //nomral 1.3

varying vec2 vUv;
varying vec2 vPosition;
varying vec3 vNormal;

uniform vec3 color;

uniform float twinkleSpeed;
uniform float speed;
 
uniform float brightness;
uniform float distfading;

const float PI = 3.141592653589793238462643383279;

void fragment(){
	
	
	
	vec2 uv = vUv.xy + 0.5;
	uv.x += TIME * speed * 0.1;
	vec3 dir = vec3(uv * 2.0, 1.0);
	float s = 0.1, fade = 0.01;
	vec3 starColor = vec3(0.0);
	
	for (int r = 0; r < volsteps; ++r) {
		vec3 p =  (TIME*0.1 * speed * twinkleSpeed) + dir * (s * 0.5); //normal 0.5
		p = abs(vec3(frequencyVariation) - mod(p, vec3(frequencyVariation * 2.0)));
		float prevlen = 0.0, a = 0.0;
		for (int i = 0; i < iterations; ++i) {
			p = abs(p);
			p = p * (1.0 / dot(p, p)) + (-sparsity); // the magic formula            
			float len = length(p);
			a += abs(len - prevlen); // absolute sum of average change
			prevlen = len;
		}
		
		a *= a * a; // add contrast
		// coloring based on distance        
		starColor += (vec3(s, s*s, s*s*s) * a * brightness + 1.0) * fade;
		fade *= distfading; // distance fading
		s += stepsize;
		
	}
	
	starColor = min(starColor, vec3(1.2));
	// Detect and suppress flickering single pixels (ignoring the huge gradients that we encounter inside bright areas)
	float intensity = min(starColor.r + starColor.g + starColor.b, 0.7);
	vec2 sgn = (vec2(vUv.xy)) * 2.0 - 1.0;
	vec2 gradient = vec2(dFdx(intensity) * sgn.x, dFdy(intensity) * sgn.y);
	float cutoff = max(max(gradient.x, gradient.y) - 0.1, 0.0);
	starColor *= max(1.0 - cutoff * 6.0, 0.3);
	// Motion blur; increases temporal coherence of undersampled flickering stars
	// and provides temporal filtering under true motion.  
	COLOR =  vec4( starColor * color, 0.5 );
	
}

void vertex(){
	vUv = UV;
	vPosition = VERTEX ;
	
}

"

[resource]
shader = SubResource( 16 )
shader_param/color = Vector3( 0, 2, 3 )
shader_param/twinkleSpeed = 10.0
shader_param/speed = 0.001
shader_param/brightness = 0.001
shader_param/distfading = 1.0
