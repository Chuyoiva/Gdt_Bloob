[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float K = 0.142857142857;
const float K2 =  0.0714285714285;
const float jitter =  0.8;

uniform float amt:hint_range(0.0, 1.0);

varying vec2 v_position;

vec4 permute(vec4 x) {
	 return mod((34.0 * x + 1.0) * x, 289.0);
}

vec2 cellular2x2(vec2 P){
	
	vec2 Pi = mod(floor(P), 289.0);
	vec2 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);
	vec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);
	vec4 p = permute(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));
	p = permute(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));
	vec4 ox = mod(p, 7.0)*K+K2;
	vec4 oy = mod(floor(p*K),7.0)*K+K2;
	vec4 dx = Pfx + jitter*ox;
	vec4 dy = Pfy + jitter*oy;
	vec4 d = dx * dx + dy * dy;
	
	if (true){
		d.xy = min(d.xy, d.zw);
		d.x = min(d.x, d.y);
		return d.xx;
	}else{
		d.xy = (d.x < d.y) ? d.xy : d.yx;
		d.xz = (d.x < d.z) ? d.xz : d.zx;
		d.xw = (d.x < d.w) ? d.xw : d.wx;
		d.y = min(d.y, d.z);
		d.y = min(d.y, d.w);
		return sqrt(d.xy);
	}
	
}

float linedcircle(vec2 pt,vec2 center, float radius, float line_width, bool soften){
	vec2 p = pt - center;
	float len = length(p);
	float edge = (soften)? radius *0.2 : 0.0;
	float half_line_width  = line_width /2.0;
	
	return smoothstep(radius-half_line_width-edge,radius-half_line_width, len) 
	- smoothstep(radius+half_line_width,radius+half_line_width+edge,length(p));
}

void fragment(){
	
	vec2 st = UV;
	vec2 u_resolution = TEXTURE_PIXEL_SIZE;
	st = (st-0.5)*0.5+0.5;
	if (u_resolution.y > u_resolution.x ){
		st.y *= u_resolution.y/u_resolution.x;
		st.y -= (u_resolution.y*0.5-u_resolution.x*0.540)/u_resolution.x;
		
	}else{
		st.x *= u_resolution.x/u_resolution.y;
		st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
	}
	
	vec2 F = 0.05/cellular2x2(st*20.0);
	vec2 pos = st-.5;
	float a = dot(pos,pos)-TIME*0.15;
	float n = step(abs(sin(a*3.1415*5.)),F.x*2.);
	float rest = 0.04/length(UV-0.5);
	n+= rest;
	
	
	if (distance(UV, vec2(0.5)) > amt / 1.0)
	{
		float r = linedcircle(v_position,vec2(0.0),25.0,1.0,true);
		r *= n;
		r = clamp(r,0.0,1.0);
		COLOR.a = r;
	}
	else 
	{
		
		COLOR = vec4(vec3(1.0),n);
	}
	
	//COLOR = vec4(vec3(1.0),n);
}

void vertex(){
	v_position = VERTEX ;
}
"

[resource]
shader = SubResource( 1 )
shader_param/amt = 0.366
